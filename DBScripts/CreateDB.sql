CREATE TABLE AUTHOR 
(
  AUTHOR_ID NUMBER(20) NOT NULL 
, NAME VARCHAR2(100) NOT NULL 
, NATIONALITY VARCHAR2(20) 
, NICKNAME VARCHAR2(20) 
, CONSTRAINT AUTHOR_PK PRIMARY KEY 
  (
    AUTHOR_ID 
  )
  ENABLE 
);

CREATE TABLE AUTHOR_BOOK
( 
  AUTHOR_ID NUMBER(20) NOT NULL
, BOOK_ID NUMBER(20) NOT NULL 
);

CREATE TABLE BOOK_COPY 
(
  BOOK_COPY_ID NUMBER(20) NOT NULL 
, DATE_ADDED DATE NOT NULL 
, TAKEN NUMBER(1) NOT NULL 
, BOOK_ID NUMBER(20) NOT NULL 
, DATE_REMOVED DATE 
, USER_ID NUMBER(20) NOT NULL 
, CONSTRAINT BOOK_COPY_PK PRIMARY KEY 
  (
    BOOK_COPY_ID 
  )

  ENABLE 
);

CREATE TABLE BOOK
(
  BOOK_ID NUMBER(20) NOT NULL 
, EDITION NUMBER(10) 
, PUBLISHER_ID NUMBER(20) NOT NULL
, YEAR_PUBLISHED NUMBER(15) NOT NULL
, COVER_PHOTO BLOB 
, NAME VARCHAR2(50) NOT NULL 
, ISBN VARCHAR2(20) 
, CATEGORY_ID NUMBER(20) NOT NULL 
, LANGUAGE_ID NUMBER(20) NOT NULL
, NUMBER_OF_COPIES NUMBER(10) 
, REGISTERED_BY NUMBER(20) NOT NULL
, CONSTRAINT BOOK_PK PRIMARY KEY 
  (
    BOOK_ID 
  )
  ENABLE 
);

CREATE TABLE BORROW 
(
  BORROW_ID NUMBER(20) NOT NULL 
, BOOK_COPY_ID NUMBER(20) NOT NULL 
, DATE_TAKEN DATE  
, DATE_RETURNED DATE 
, FINAL_DATE DATE
, ADMIN_RETURN_ID NUMBER(20)  
, CONSTRAINT BORROW_PK PRIMARY KEY 
  (
    BORROW_ID 
  ) 
  ENABLE 
);

CREATE TABLE CATEGORY 
(
  CATEGORY_ID NUMBER(20) NOT NULL 
, NAME VARCHAR2(50) 
, CONSTRAINT CATEGORY_PK PRIMARY KEY 
  (
    CATEGORY_ID 
  )

  ENABLE 
);

CREATE TABLE COMMENTS 
(
  COMMENT_ID NUMBER(20) NOT NULL 
, PARENT_ID NUMBER(20) 
, USER_ID NUMBER(20) NOT NULL 
, COMMENT_DATE DATE NOT NULL 
, BOOK_ID NUMBER(20) NOT NULL 
, CONTENT VARCHAR2(150) NOT NULL 
, CONSTRAINT COMMENTS_PK PRIMARY KEY 
  (
    COMMENT_ID 
  )
  ENABLE 
);

CREATE TABLE KEYWORDS 
(
  KEYWORDS_ID NUMBER(20) NOT NULL 
, KEYWORD VARCHAR2(50) NOT NULL 
, CONSTRAINT KEYWORDS_PK PRIMARY KEY 
  (
    KEYWORDS_ID 
  )
  ENABLE 
);

CREATE TABLE KEYWORDS_BOOK
(
  KEYWORD_BOOK_ID NUMBER(20) NOT NULL 
, BOOK_ID NUMBER(20) NOT NULL 
, KEYWORDS_ID NUMBER(20) 
, CONSTRAINT KEYWORDS_BOOK_PK PRIMARY KEY 
  (
    KEYWORD_BOOK_ID 
  )
  ENABLE 
);

CREATE TABLE MESSAGE 
(
  MESSAGE_ID NUMBER(20) NOT NULL 
, TO_USER_ID NUMBER(20) NOT NULL 
, MESSAGE_DATE DATE NOT NULL 
, MESSAGE_TEXT VARCHAR2(200) NOT NULL
, READ_DATE DATE 
, FROM_USER_ID NUMBER(20) NOT NULL 
, CONSTRAINT MESSAGES_PK PRIMARY KEY 
  (
    MESSAGE_ID 
  )
  ENABLE 
);

CREATE TABLE PUBLISHER 
(
  PUBLISHER_ID NUMBER(20) NOT NULL 
, NAME VARCHAR2(100) 
, CONSTRAINT PUBLISHER_PK PRIMARY KEY 
  (
    PUBLISHER_ID 
  )
  ENABLE 
);

CREATE TABLE TYPES
(
  TYPE_ID NUMBER(20) NOT NULL 
, TYPE_NAME VARCHAR2(50) 
, CONSTRAINT TYPE_PK PRIMARY KEY 
  (
    TYPE_ID 
  )
  ENABLE 
);

CREATE TABLE USER_ROLE 
(
  USER_ROLE_ID NUMBER(20) NOT NULL 
, ROLE_NAME VARCHAR2(50) NOT NULL 
, CONSTRAINT USER_ROLE_PK PRIMARY KEY 
  (
    USER_ROLE_ID 
  )
  ENABLE 
);

CREATE TABLE LANGUAGE
(
  LANGUAGE_ID NUMBER(20) NOT NULL
, LANGUAGE_NAME VARCHAR2(20) NOT NULL
, CONSTRAINT LANGUAGE_PK PRIMARY KEY 
  (
    LANGUAGE_ID
  )
  ENABLE
);

CREATE TABLE REJECT_REASON
(
  REJECT_REASON_ID NUMBER(20) NOT NULL
, TEXT VARCHAR2(150) NOT NULL
, CONSTRAINT REJECT_REASON_PK PRIMARY KEY 
  (
    REJECT_REASON_ID
  )
  ENABLE
);

CREATE TABLE REQUEST
(
  REQUEST_ID NUMBER(20) NOT NULL
, USER_ID NUMBER(20) NOT NULL
, BOOK_ID NUMBER(20) NOT NULL
, TYPE_ID NUMBER(20) NOT NULL
, DATE_MADE DATE NOT NULL
, ADMIN_ID NUMBER(20)
, REQUEST_COMMENT VARCHAR2(150) 
, REJECT_REASON_ID NUMBER(20)
, DATE_ANSWERED DATE 
, CONSTRAINT REQUEST_PK PRIMARY KEY 
  (
    REQUEST_ID
  )
  ENABLE
);

CREATE TABLE USERS
(
  USER_ID NUMBER(20) NOT NULL
, USERNAME VARCHAR2(20) NOT NULL
, PASSWORD VARCHAR2(50) NOT NULL
, FIRST_NAME VARCHAR2(50) NOT NULL
, LAST_NAME VARCHAR2(50) NOT NULL
, USER_ROLE_ID NUMBER(20) NOT NULL
, DATE_REGISTERED DATE NOT NULL
, DATE_INACTIVE DATE
, EMAIL VARCHAR2(50) NOT NULL
, PHONE VARCHAR2(50)
, PICTURE BLOB 
, CONSTRAINT USERS_PK PRIMARY KEY 
  (
    USER_ID
  )
  ENABLE
);

ALTER TABLE AUTHOR_BOOK
ADD CONSTRAINT AUTHOR_BOOK_FK_AUTHOR FOREIGN KEY
(
  AUTHOR_ID 
)
REFERENCES AUTHOR
(
  AUTHOR_ID 
)
ENABLE;

ALTER TABLE AUTHOR_BOOK
ADD CONSTRAINT AUTHOR_BOOK_FK_BOOK FOREIGN KEY
(
  BOOK_ID 
)
REFERENCES BOOK
(
  BOOK_ID 
)
ENABLE;

ALTER TABLE BOOK_COPY
ADD CONSTRAINT BOOK_COPY_FK_BOOK FOREIGN KEY
(
  BOOK_ID 
)
REFERENCES BOOK
(
  BOOK_ID 
)
ENABLE;

ALTER TABLE BOOK_COPY
ADD CONSTRAINT BOOK_COPY_FK_USERS FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE BOOK
ADD CONSTRAINT BOOK_FK_CATEGORY FOREIGN KEY
(
  CATEGORY_ID 
)
REFERENCES CATEGORY
(
  CATEGORY_ID 
)
ENABLE;

ALTER TABLE BOOK
ADD CONSTRAINT BOOK_FK_LANGUAGE FOREIGN KEY
(
  LANGUAGE_ID 
)
REFERENCES LANGUAGE
(
  LANGUAGE_ID 
)
ENABLE;

ALTER TABLE BOOK
ADD CONSTRAINT BOOK_FK_PUBLISHER FOREIGN KEY
(
  PUBLISHER_ID 
)
REFERENCES PUBLISHER
(
  PUBLISHER_ID 
)
ENABLE;

ALTER TABLE BOOK
ADD CONSTRAINT BOOK_FK_USERS FOREIGN KEY
(
  REGISTERED_BY 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE BORROW
ADD CONSTRAINT BORROW_FK_BOOK_COPY FOREIGN KEY
(
  BOOK_COPY_ID
)
REFERENCES BOOK_COPY
(
  BOOK_COPY_ID 
)
ENABLE;

ALTER TABLE BORROW
ADD CONSTRAINT BORROW_FK_USERS FOREIGN KEY
(
  ADMIN_RETURN_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE BORROW
ADD CONSTRAINT BORROW_FK_REQUEST FOREIGN KEY
(
  BORROW_ID 
)
REFERENCES REQUEST
(
  REQUEST_ID 
)
ENABLE;

ALTER TABLE COMMENTS
ADD CONSTRAINT COMMENTS_FK_BOOK FOREIGN KEY
(
  BOOK_ID 
)
REFERENCES BOOK
(
  BOOK_ID 
)
ENABLE;

ALTER TABLE COMMENTS
ADD CONSTRAINT COMMENTS_FK_COMMENTS FOREIGN KEY
(
  PARENT_ID 
)
REFERENCES COMMENTS
(
  COMMENT_ID 
)
ENABLE;

ALTER TABLE COMMENTS
ADD CONSTRAINT COMMENTS_FK_USERS FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE KEYWORDS_BOOK
ADD CONSTRAINT KEYWORDS_BOOK_FK_BOOK FOREIGN KEY
(
  BOOK_ID 
)
REFERENCES BOOK
(
  BOOK_ID 
)
ENABLE;

ALTER TABLE KEYWORDS_BOOK
ADD CONSTRAINT KEYWORDS_BOOK_FK_KW FOREIGN KEY
(
  KEYWORDS_ID 
)
REFERENCES KEYWORDS
(
  KEYWORDS_ID 
)
ENABLE;

ALTER TABLE MESSAGE
ADD CONSTRAINT MESSAGE_FK_FROM_USER FOREIGN KEY
(
  FROM_USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE MESSAGE
ADD CONSTRAINT MESSAGE_FK_TO_USER FOREIGN KEY
(
  TO_USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE REQUEST
ADD CONSTRAINT REQUEST_FK_ADMIN FOREIGN KEY
(
  ADMIN_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE REQUEST
ADD CONSTRAINT REQUEST_FK_BOOK FOREIGN KEY
(
  BOOK_ID 
)
REFERENCES BOOK
(
  BOOK_ID 
)
ENABLE;

ALTER TABLE REQUEST
ADD CONSTRAINT REQUEST_FK_REJECT_REASON FOREIGN KEY
(
  REJECT_REASON_ID 
)
REFERENCES REJECT_REASON
(
  REJECT_REASON_ID 
)
ENABLE;

ALTER TABLE REQUEST
ADD CONSTRAINT REQUEST_FK_TYPE FOREIGN KEY
(
  TYPE_ID 
)
REFERENCES TYPES
(
  TYPE_ID 
)
ENABLE;

ALTER TABLE REQUEST
ADD CONSTRAINT REQUEST_FK_USERS FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  USER_ID 
)
ENABLE;

ALTER TABLE USERS 
ADD CONSTRAINT USERS_FK_USER_ROLE FOREIGN KEY 
(
  USER_ROLE_ID
)
REFERENCES USER_ROLE
(
  USER_ROLE_ID
)
ENABLE;

ALTER TABLE AUTHOR_BOOK
ADD CONSTRAINT AUTHOR_BOOK_UK UNIQUE 
(
  AUTHOR_ID 
, BOOK_ID 
)
ENABLE;

ALTER TABLE BOOK
ADD CONSTRAINT BOOK_ISBN UNIQUE 
(
  ISBN 
)
ENABLE;

ALTER TABLE CATEGORY
ADD CONSTRAINT CATEGORY_UK UNIQUE 
(
  NAME 
)
ENABLE;

ALTER TABLE KEYWORDS
ADD CONSTRAINT KEYWORD_UNIQUE UNIQUE 
(
  KEYWORD 
)
ENABLE;

ALTER TABLE KEYWORDS_BOOK
ADD CONSTRAINT KEYWORDS_BOOK_UK UNIQUE 
(
  BOOK_ID 
, KEYWORDS_ID 
)
ENABLE;

ALTER TABLE LANGUAGE
ADD CONSTRAINT LANGUAGE_UNIQUE UNIQUE 
(
  LANGUAGE_NAME 
)
ENABLE;

ALTER TABLE PUBLISHER
ADD CONSTRAINT PUBLISHER_UK UNIQUE 
(
  NAME 
)
ENABLE;

ALTER TABLE TYPES
ADD CONSTRAINT TYPE_UK UNIQUE 
(
  TYPE_NAME 
)
ENABLE;

ALTER TABLE USER_ROLE
ADD CONSTRAINT USER_ROLE_UNIQUE UNIQUE 
(
  ROLE_NAME 
)
ENABLE;

ALTER TABLE USERS
ADD CONSTRAINT USERS_USERNAME UNIQUE 
(
  USERNAME 
)
ENABLE;

CREATE SEQUENCE BOOK_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE KEYWORDS_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE KEYWORDS_BOOK_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE BOOK_COPY_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE AUTHOR_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE MESSAGE_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE USERS_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE COMMENT_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE PUBLISHER_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE REQUEST_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;
CREATE SEQUENCE AUTHOR_BOOK_SEQ INCREMENT BY 1 START WITH 5000000000 MAXVALUE 500000000000 MINVALUE 1 CYCLE;

CREATE OR REPLACE VIEW top_users_borrowing AS
SELECT username, num_req FROM (SELECT users.username, count(request.request_id) as num_req from request
join users 
on users.user_id=request.user_id
where request.TYPE_ID < 3
group by username
order by num_req desc)
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW top_users_commenting AS
SELECT username, num_comm FROM (SELECT users.username, count(comments.comment_id) as num_comm from COMMENTS
join users 
on users.user_id=COMMENTS.USER_ID
group by username
order by num_comm desc)
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW top_users_rejected AS
SELECT username, num_req FROM (SELECT users.username, count(request.request_id) as num_req from request
join users 
on users.user_id=request.user_id
where reject_reason_id IS NOT NULL
group by username
order by num_req desc)
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW top_users_suggesting AS
SELECT username, num_req FROM (SELECT users.username, count(request.request_id) as num_req from request
join users 
on users.user_id=request.user_id
where request.TYPE_ID >= 3  
group by username
order by num_req desc)
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW top_users_overtime AS
SELECT username, num_borw FROM (SELECT users.username, count(borrow.BORROW_ID) as num_borw from borrow
join REQUEST 
on borrow.BORROW_ID=request.request_id
join users
on users.user_id=request.user_id
where borrow.DATE_RETURNED>borrow.FINAL_DATE
group by username
order by num_borw desc)
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW ALL_ADMINS AS
SELECT USER_ID, USERNAME, PASSWORD, FIRST_NAME, LAST_NAME, USERS.USER_ROLE_ID, ROLE_NAME, DATE_REGISTERED, DATE_INACTIVE, EMAIL, PHONE, PICTURE
FROM USERS INNER JOIN USER_ROLE ON USERS.USER_ROLE_ID = USER_ROLE.USER_ROLE_ID
WHERE USER_ROLE.ROLE_NAME='admin';

CREATE OR REPLACE VIEW ALL_USERS AS
SELECT USER_ID, USERNAME, PASSWORD, FIRST_NAME, LAST_NAME, USERS.USER_ROLE_ID, ROLE_NAME, DATE_REGISTERED, DATE_INACTIVE, EMAIL, PHONE, PICTURE
FROM USERS INNER JOIN USER_ROLE ON USERS.USER_ROLE_ID = USER_ROLE.USER_ROLE_ID
WHERE USER_ROLE.ROLE_NAME='user';

CREATE OR REPLACE VIEW ALL_REQUESTS AS
SELECT USERNAME,COUNT(ACTIVE.REQUEST_ID) - COUNT(ACTIVE.ADMIN_ID)  AS WAITING, COUNT(ACTIVE.REJECT_REASON_ID) AS REJECTED,
COUNT(B.BORROW_ID)- COUNT(B.DATE_TAKEN) AS APPROVED_UNTAKEN,-- approved request and not taken 
COUNT (B.DATE_RETURNED) AS ENDED,
COUNT (B.DATE_TAKEN) - COUNT(B.DATE_RETURNED) AS HOLDS --  taten-returned gives not retuned and taken count date-returned null)
FROM USERS U
LEFT JOIN REQUEST  ACTIVE ON U.USER_ID = ACTIVE.USER_ID 
LEFT JOIN BORROW B        ON ACTIVE.REQUEST_ID = B.BORROW_ID
GROUP BY U.USERNAME;

CREATE OR REPLACE VIEW MOST_COMMENTED_BOOKS AS
SELECT BOOK_NAME, COMM_COUNT FROM (
SELECT NAME AS BOOK_NAME, COUNT(COMMENTS.BOOK_ID) AS COMM_COUNT FROM BOOK 
JOIN COMMENTS ON BOOK.BOOK_ID = COMMENTS.BOOK_ID
GROUP BY COMMENTS.BOOK_ID, NAME
ORDER BY  COUNT(COMMENTS.BOOK_ID) DESC) MYTAB
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW MOST_CREADED_BOOKS AS
SELECT BOOK_NAME, BOOKS_COUNT FROM (
SELECT NAME AS BOOK_NAME, COUNT(BORROW.BOOK_COPY_ID) AS BOOKS_COUNT 
FROM BOOK  BK
JOIN BOOK_COPY ON BK.BOOK_ID = BOOK_COPY.BOOK_ID
JOIN BORROW ON BOOK_COPY.BOOK_COPY_ID = BORROW.BOOK_COPY_ID AND BORROW.DATE_TAKEN IS NOT NULL
GROUP BY BOOK_COPY.BOOK_ID, NAME
ORDER BY  COUNT(BORROW.BOOK_COPY_ID) DESC) MYTAB
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW MOST_READED_BOOK_COPIES AS
SELECT BOOK_NAME, BOOKS_COUNT FROM (
SELECT NAME AS BOOK_NAME, COUNT(BORROW.BOOK_COPY_ID) AS BOOKS_COUNT 
FROM BOOK  BK
JOIN BOOK_COPY ON BK.BOOK_ID = BOOK_COPY.BOOK_ID
JOIN BORROW ON BOOK_COPY.BOOK_COPY_ID = BORROW.BOOK_COPY_ID AND BORROW.DATE_TAKEN IS NOT NULL
GROUP BY BOOK_COPY.BOOK_COPY_ID, NAME
ORDER BY  COUNT(BORROW.BOOK_COPY_ID) DESC) MYTAB
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW MOST_SUGGESTED_BOOKS AS
SELECT BOOK_NAME, SUGGESTED_COUNT FROM (
SELECT NAME AS BOOK_NAME, COUNT(REQUEST.BOOK_ID) AS SUGGESTED_COUNT 
FROM BOOK BK
JOIN REQUEST ON BK.BOOK_ID = REQUEST.BOOK_ID AND REQUEST.TYPE_ID = 3 OR REQUEST.TYPE_ID = 4
GROUP BY REQUEST.BOOK_ID, NAME
ORDER BY COUNT(REQUEST.TYPE_ID) DESC) MYTAB
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW MOST_DELAYED_BOOKS AS
SELECT BOOK_NAME, BOOKS_COUNT FROM (
SELECT NAME AS BOOK_NAME, COUNT(BORROW.BOOK_COPY_ID) AS BOOKS_COUNT 
FROM BOOK  BK
JOIN BOOK_COPY ON BK.BOOK_ID = BOOK_COPY.BOOK_ID
JOIN BORROW ON BOOK_COPY.BOOK_COPY_ID = BORROW.BOOK_COPY_ID AND (BORROW.FINAL_DATE < BORROW.DATE_RETURNED OR SYSDATE > BORROW.FINAL_DATE)
GROUP BY BOOK_COPY.BOOK_ID, NAME
ORDER BY  COUNT(BORROW.BOOK_COPY_ID) DESC) MYTAB
WHERE ROWNUM <= 20;

CREATE OR REPLACE VIEW ACTUAL_BOOKS AS
SELECT *
FROM BOOK_COPY
WHERE BOOK_COPY.DATE_REMOVED IS NULL;

CREATE OR REPLACE VIEW ALL_RECOMMENDED_BOOKS AS
SELECT BOOK.NAME, COUNT (BOOK.NAME) AS NUMBER_RECOMMENDED
FROM REQUEST JOIN BOOK ON REQUEST.BOOK_ID = BOOK.BOOK_ID
WHERE REQUEST.TYPE_ID = 3
GROUP BY BOOK.NAME
ORDER BY COUNT (BOOK.NAME) DESC;

CREATE OR REPLACE VIEW ALL_BOOKS AS
SELECT BOOK.NAME, COUNT(ACTUAL_BOOKS.BOOK_COPY_ID) AS NUMBER_COPIES
FROM BOOK 
  JOIN ACTUAL_BOOKS ON BOOK.BOOK_ID = ACTUAL_BOOKS.BOOK_ID
GROUP BY BOOK.NAME;

CREATE OR REPLACE VIEW ALL_AVAILABLE_BOOKS AS
SELECT BOOK.NAME, COUNT(ACTUAL_BOOKS.BOOK_COPY_ID) AS NUMBER_COPIES
FROM BOOK 
  JOIN ACTUAL_BOOKS ON BOOK.BOOK_ID = ACTUAL_BOOKS.BOOK_ID
  LEFT JOIN BORROW ON ACTUAL_BOOKS.BOOK_COPY_ID = BORROW.BOOK_COPY_ID
WHERE BORROW.DATE_TAKEN IS NULL
  OR BORROW.DATE_RETURNED IS NOT NULL
GROUP BY BOOK.NAME;

CREATE OR REPLACE VIEW ALL_UNPROCESSED_REQUESTS AS
SELECT BK.NAME, US.USERNAME
FROM REQUEST REQ
INNER JOIN BOOK BK ON BK.BOOK_ID = REQ.BOOK_ID
INNER JOIN USERS US ON US.USER_ID = REQ.USER_ID
WHERE REQ.DATE_ANSWERED IS NULL;

CREATE OR REPLACE VIEW ALL_REJECTED_REQUESTS AS
SELECT US.USERNAME, BK.NAME, REJ.TEXT
FROM REQUEST REQ
INNER JOIN BOOK BK ON BK.BOOK_ID = REQ.BOOK_ID
INNER JOIN USERS US ON US.USER_ID = REQ.USER_ID
INNER JOIN REJECT_REASON REJ ON REJ.REJECT_REASON_ID = REQ.REJECT_REASON_ID
WHERE REQ.REJECT_REASON_ID IS NOT NULL;

CREATE OR REPLACE VIEW ALL_USER_COMMENTS AS
SELECT C1.COMMENT_ID, U.USER_ID, U.USERNAME, C1.COMMENT_DATE, C1.CONTENT, C2.USER_ID AS REPLY_USER_ID, C2.COMMENT_DATE AS REPLY_COMMENT_DATE, C2.CONTENT AS REPLY_CONTENT
FROM USERS U 
INNER JOIN COMMENTS C1 ON U.USER_ID=C1.USER_ID
LEFT JOIN COMMENTS C2 ON C2.PARENT_ID=C1.COMMENT_ID
WHERE C1.PARENT_ID IS NULL
ORDER BY C1.USER_ID, C1.COMMENT_DATE;

CREATE OR REPLACE VIEW ALL_BOOK_COMMENTS AS
SELECT C1.COMMENT_ID, BK.BOOK_ID, BK.NAME, C1.USER_ID AS FROM_USER_ID, C1.COMMENT_DATE, C1.CONTENT, C2.USER_ID AS REPLY_USER_ID, C2.COMMENT_DATE AS REPLY_COMMENT_DATE, C2.CONTENT AS REPLY_CONTENT
FROM BOOK BK
INNER JOIN COMMENTS C1 ON BK.BOOK_ID=C1.BOOK_ID
LEFT JOIN COMMENTS C2 ON C2.PARENT_ID=C1.COMMENT_ID
WHERE C1.PARENT_ID IS NULL
ORDER BY BK.BOOK_ID;

CREATE OR REPLACE VIEW ALL_USER_MESSAGES AS
SELECT M.TO_USER_ID, U1.USERNAME, U1.FIRST_NAME, U1.LAST_NAME, M.MESSAGE_DATE, M.MESSAGE_TEXT, M.READ_DATE, M.FROM_USER_ID, U2.USERNAME AS ADMIN_USERNAME, U2.FIRST_NAME AS ADMIN_FIRSTNAME, U2.LAST_NAME AS ADMIN_LASTNAME
FROM USERS U1 
INNER JOIN MESSAGE M ON U1.USER_ID=M.TO_USER_ID
LEFT JOIN USERS U2 ON M.FROM_USER_ID=U2.USER_ID
ORDER BY U1.USER_ID;

CREATE OR REPLACE VIEW ALL_READ_USER_MESSAGES AS
SELECT M.TO_USER_ID, U1.USERNAME, U1.FIRST_NAME, U1.LAST_NAME, M.MESSAGE_DATE, M.MESSAGE_TEXT, M.READ_DATE, M.FROM_USER_ID, U2.USERNAME AS ADMIN_USERNAME, U2.FIRST_NAME AS ADMIN_FIRSTNAME, U2.LAST_NAME AS ADMIN_LASTNAME
FROM USERS U1 
INNER JOIN MESSAGE M ON U1.USER_ID=M.TO_USER_ID
LEFT JOIN USERS U2 ON M.FROM_USER_ID=U2.USER_ID
WHERE READ_DATE IS NOT NULL
ORDER BY U1.USER_ID;

CREATE OR REPLACE VIEW ALL_UNREAD_USER_MESSAGES AS
SELECT M.TO_USER_ID, U1.USERNAME, U1.FIRST_NAME, U1.LAST_NAME, M.MESSAGE_DATE, M.MESSAGE_TEXT, M.FROM_USER_ID, U2.USERNAME AS ADMIN_USERNAME, U2.FIRST_NAME AS ADMIN_FIRSTNAME, U2.LAST_NAME AS ADMIN_LASTNAME
FROM USERS U1 
INNER JOIN MESSAGE M ON U1.USER_ID=M.TO_USER_ID
LEFT JOIN USERS U2 ON M.FROM_USER_ID=U2.USER_ID
WHERE READ_DATE IS NULL
ORDER BY U1.USER_ID;

COMMIT;